base::as.numeric()
# armazena resultados por pagina
page_outcome <- html %>%
rvest::html_nodes("[class='property-card__content-link js-card-title']") %>%
rvest::html_text2() %>%
base::length() %>%
base::as.numeric()
# calcula qtd de paginas
pages <- 1:base::ceiling(outcome / page_outcome)
# declara objeto de resultados
houses <- base::data.frame()
# Iniciar um servidor Selenium e criar instancia de browser
rD <- RSelenium::rsDriver(browser = 'chrome', port = 4545L, chromever = '89.0.4389.23')
remDr <- rD[['client']] # browser
# navegar p/ site
remDr$navigate(base::paste0(base_link,route_params,query_params))
rD$server$stop()
rD$server
rD$client$getStatus()
rD$client$open()
# navegar p/ site
remDr$navigate(base::paste0(base_link,route_params,query_params))
Sys.sleep(5) # espera a pagina renderizar completamente
# armazena html do site
html <- rvest::read_html(remDr$getPageSource()[[1]])
# armazena numero de resultados p/ calcular qtd de paginas
outcome <- html %>%
rvest::html_nodes(".js-total-records") %>%
rvest::html_text2() %>%
base::as.numeric()
# armazena resultados por pagina
page_outcome <- html %>%
rvest::html_nodes("[class='property-card__content-link js-card-title']") %>%
rvest::html_text2() %>%
base::length() %>%
base::as.numeric()
# calcula qtd de paginas
pages <- 1:base::ceiling(outcome / page_outcome)
# declara objeto de resultados
houses <- base::data.frame()
length(houses)
for (p in pages) {
page_link <- base::paste0(base_link,route_params,pagination,p,query_params)
remDr$navigate(page_link)
#print(page_link)
# armazena descricoes
descriptions <- html %>%
rvest::html_nodes("[class='results__content']") %>%
rvest::html_nodes("[class='property-card__title js-cardLink js-card-title']") %>%
rvest::html_text2()
# armazena link do imovel
paths <- html %>%
rvest::html_nodes("[class='results__content']") %>%
rvest::html_nodes("[class='property-card__content-link js-card-title']") %>%
rvest::html_attr("href")
# armazena precos
prices <- html %>%
rvest::html_nodes("[class='results__content']") %>%
rvest::html_nodes("[class='property-card__price js-property-card-prices js-property-card__price-small']") %>%
rvest::html_text2() %>%
base::substring(4) %>%
stringr::str_remove_all(" /Mês")
# armazena resultados no dataframe
houses <- rbind(data.frame(descriptions, paths, prices), houses)
print(length(houses))
}
str(houses)
dim(houses)
rm(houses)
Sys.sleep(2)
for (p in pages) {
page_link <- base::paste0(base_link,route_params,pagination,p,query_params)
remDr$navigate(page_link)
#print(page_link)
# armazena descricoes
descriptions <- html %>%
rvest::html_nodes("[class='results__content']") %>%
rvest::html_nodes("[class='property-card__title js-cardLink js-card-title']") %>%
rvest::html_text2()
# armazena link do imovel
paths <- html %>%
rvest::html_nodes("[class='results__content']") %>%
rvest::html_nodes("[class='property-card__content-link js-card-title']") %>%
rvest::html_attr("href")
# armazena precos
prices <- html %>%
rvest::html_nodes("[class='results__content']") %>%
rvest::html_nodes("[class='property-card__price js-property-card-prices js-property-card__price-small']") %>%
rvest::html_text2() %>%
base::substring(4) %>%
stringr::str_remove_all(" /Mês")
# armazena resultados no dataframe
houses <- rbind(data.frame(descriptions, paths, prices), houses)
print(dim(houses))
Sys.sleep(2)
}
# declara objeto de resultados
houses <- base::data.frame()
for (p in pages) {
page_link <- base::paste0(base_link,route_params,pagination,p,query_params)
remDr$navigate(page_link)
#print(page_link)
# armazena descricoes
descriptions <- html %>%
rvest::html_nodes("[class='results__content']") %>%
rvest::html_nodes("[class='property-card__title js-cardLink js-card-title']") %>%
rvest::html_text2()
# armazena link do imovel
paths <- html %>%
rvest::html_nodes("[class='results__content']") %>%
rvest::html_nodes("[class='property-card__content-link js-card-title']") %>%
rvest::html_attr("href")
# armazena precos
prices <- html %>%
rvest::html_nodes("[class='results__content']") %>%
rvest::html_nodes("[class='property-card__price js-property-card-prices js-property-card__price-small']") %>%
rvest::html_text2() %>%
base::substring(4) %>%
stringr::str_remove_all(" /Mês")
# armazena resultados no dataframe
houses <- rbind(data.frame(descriptions, paths, prices), houses)
print(dim(houses))
Sys.sleep(2)
}
print(pages)
print(pages - 1)
rm(houses)
# declara objeto de resultados
houses <- base::data.frame()
for (p in pages) {
page_link <- base::paste0(base_link,route_params,pagination,p,query_params)
remDr$navigate(page_link)
print(p)
# armazena descricoes
descriptions <- html %>%
rvest::html_nodes("[class='results__content']") %>%
rvest::html_nodes("[class='property-card__title js-cardLink js-card-title']") %>%
rvest::html_text2()
# armazena link do imovel
paths <- html %>%
rvest::html_nodes("[class='results__content']") %>%
rvest::html_nodes("[class='property-card__content-link js-card-title']") %>%
rvest::html_attr("href")
# armazena precos
prices <- html %>%
rvest::html_nodes("[class='results__content']") %>%
rvest::html_nodes("[class='property-card__price js-property-card-prices js-property-card__price-small']") %>%
rvest::html_text2() %>%
base::substring(4) %>%
stringr::str_remove_all(" /Mês")
# armazena resultados no dataframe
houses <- rbind(data.frame(descriptions, paths, prices), houses)
print(dim(houses))
Sys.sleep(2)
}
print(length(descriptions))
rm(houses)
# declara objeto de resultados
houses <- base::data.frame()
for (p in pages) {
page_link <- base::paste0(base_link,route_params,pagination,p,query_params)
remDr$navigate(page_link)
print(p)
# armazena descricoes
descriptions <- html %>%
rvest::html_nodes("[class='results__content']") %>%
rvest::html_nodes("[class='property-card__title js-cardLink js-card-title']") %>%
rvest::html_text2()
# armazena link do imovel
paths <- html %>%
rvest::html_nodes("[class='results__content']") %>%
rvest::html_nodes("[class='property-card__content-link js-card-title']") %>%
rvest::html_attr("href")
# armazena precos
prices <- html %>%
rvest::html_nodes("[class='results__content']") %>%
rvest::html_nodes("[class='property-card__price js-property-card-prices js-property-card__price-small']") %>%
rvest::html_text2() %>%
base::substring(4) %>%
stringr::str_remove_all(" /Mês")
# armazena resultados no dataframe
houses <- rbind(data.frame(descriptions, paths, prices), houses)
print(length(descriptions))
Sys.sleep(2)
}
rm(houses)
# declara objeto de resultados
houses <- base::data.frame()
for (p in pages) {
page_link <- base::paste0(base_link,route_params,pagination,p,query_params)
remDr$navigate(page_link)
Sys.sleep(2)
print(p)
# armazena descricoes
descriptions <- html %>%
rvest::html_nodes("[class='results__content']") %>%
rvest::html_nodes("[class='property-card__title js-cardLink js-card-title']") %>%
rvest::html_text2()
# armazena link do imovel
paths <- html %>%
rvest::html_nodes("[class='results__content']") %>%
rvest::html_nodes("[class='property-card__content-link js-card-title']") %>%
rvest::html_attr("href")
# armazena precos
prices <- html %>%
rvest::html_nodes("[class='results__content']") %>%
rvest::html_nodes("[class='property-card__price js-property-card-prices js-property-card__price-small']") %>%
rvest::html_text2() %>%
base::substring(4) %>%
stringr::str_remove_all(" /Mês")
# armazena resultados no dataframe
houses <- rbind(data.frame(descriptions, paths, prices), houses)
print(length(descriptions))
}
rm(houses)
pagination <- c('?pagina=5')
# declara objeto de resultados
houses <- base::data.frame()
page_link <- base::paste0(base_link,route_params,pagination,query_params)
page_link
remDr$navigate(page_link)
# armazena descricoes
descriptions <- html %>%
rvest::html_nodes("[class='results__content']") %>%
rvest::html_nodes("[class='property-card__title js-cardLink js-card-title']") %>%
rvest::html_text2()
page_link
remDr$navigate(page_link)
# armazena descricoes
descriptions <- html %>%
rvest::html_nodes("[class='results__content']") %>%
rvest::html_nodes("[class='property-card__title js-cardLink js-card-title']") %>%
rvest::html_text2()
# navegar p/ site
remDr$navigate(base::paste0(base_link,route_params,query_params))
rD$client$open
rD$client$open()
page_link
remDr$navigate(page_link)
# armazena descricoes
descriptions <- html %>%
rvest::html_nodes("[class='results__content']") %>%
rvest::html_nodes(".js-card-title .js-card-title") %>%
rvest::html_text2()
descriptions
# armazena html do site
html <- rvest::read_html(remDr$getPageSource()[[1]])
# armazena numero de resultados p/ calcular qtd de paginas
outcome <- html %>%
rvest::html_nodes(".js-total-records") %>%
rvest::html_text2() %>%
base::as.numeric()
# armazena resultados por pagina
page_outcome <- html %>%
rvest::html_nodes("[class='property-card__content-link js-card-title']") %>%
rvest::html_text2() %>%
base::length() %>%
base::as.numeric()
# calcula qtd de paginas
pages <- 1:base::ceiling(outcome / page_outcome)
# declara objeto de resultados
houses <- base::data.frame()
page_link <- base::paste0(base_link,route_params,pagination,query_params)
page_link
remDr$navigate(page_link)
# armazena descricoes
descriptions <- html %>%
rvest::html_nodes("[class='results__content']") %>%
rvest::html_nodes(".js-card-title .js-card-title") %>%
rvest::html_text2()
for (p in pages) {
page_link <- base::paste0(base_link,route_params,pagination,query_params)
remDr$navigate(page_link)
html <- rvest::read_html(remDr$getPageSource()[[1]])
Sys.sleep(2)
# armazena descricoes
descriptions <- html %>%
rvest::html_nodes("[class='results__content']") %>%
rvest::html_nodes(".js-card-title .js-card-title") %>%
rvest::html_text2()
# armazena link do imovel
paths <- html %>%
rvest::html_nodes("[class='results__content']") %>%
rvest::html_nodes("[class='property-card__content-link js-card-title']") %>%
rvest::html_attr("href")
# armazena precos
prices <- html %>%
rvest::html_nodes("[class='results__content']") %>%
rvest::html_nodes("[class='property-card__price js-property-card-prices js-property-card__price-small']") %>%
rvest::html_text2() %>%
base::substring(4) %>%
stringr::str_remove_all(" /Mês")
# armazena resultados no dataframe
houses <- rbind(data.frame(descriptions, paths, prices), houses)
}
for (p in pages) {
page_link <- base::paste0(base_link,route_params,pagination,p,query_params)
remDr$navigate(page_link)
html <- rvest::read_html(remDr$getPageSource()[[1]])
Sys.sleep(2)
# armazena descricoes
descriptions <- html %>%
rvest::html_nodes("[class='results__content']") %>%
rvest::html_nodes(".js-card-title .js-card-title") %>%
rvest::html_text2()
# armazena link do imovel
paths <- html %>%
rvest::html_nodes("[class='results__content']") %>%
rvest::html_nodes("[class='property-card__content-link js-card-title']") %>%
rvest::html_attr("href")
# armazena precos
prices <- html %>%
rvest::html_nodes("[class='results__content']") %>%
rvest::html_nodes("[class='property-card__price js-property-card-prices js-property-card__price-small']") %>%
rvest::html_text2() %>%
base::substring(4) %>%
stringr::str_remove_all(" /Mês")
# armazena resultados no dataframe
houses <- rbind(data.frame(descriptions, paths, prices), houses)
}
rm(houses)
# zera td
rm(list = ls())
# carrega pckgs
pacman::p_load('RSelenium', 'plyr', 'dplyr', 'rvest', 'stringr')
# abstracao dos links por partes
base_link <- c('https://www.vivareal.com.br/')
route_params <- c('aluguel/sp/sao-jose-do-rio-preto/condominio_residencial/')
pagination <- c('?pagina=')
query_params <- c('#ordenar-por=preco:ASC&preco-ate=3000&preco-desde=2000&quartos=2&tipos=condominio_residencial,casa_residencial')
# Iniciar um servidor Selenium e criar instancia de browser
rD <- RSelenium::rsDriver(browser = 'chrome', port = 4545L, chromever = '89.0.4389.23')
remDr <- rD[['client']] # browser
# navegar p/ site
remDr$navigate(base::paste0(base_link,route_params,query_params))
Sys.sleep(5) # espera a pagina renderizar completamente
#rD$client$open()
# armazena html do site
html <- rvest::read_html(remDr$getPageSource()[[1]])
# armazena numero de resultados p/ calcular qtd de paginas
outcome <- html %>%
rvest::html_nodes(".js-total-records") %>%
rvest::html_text2() %>%
base::as.numeric()
# armazena resultados por pagina
page_outcome <- html %>%
rvest::html_nodes("[class='property-card__content-link js-card-title']") %>%
rvest::html_text2() %>%
base::length() %>%
base::as.numeric()
# calcula qtd de paginas
pages <- 1:base::ceiling(outcome / page_outcome)
# declara objeto de resultados
houses <- base::data.frame()
for (p in pages) {
page_link <- base::paste0(base_link,route_params,pagination,p,query_params)
remDr$navigate(page_link)
html <- rvest::read_html(remDr$getPageSource()[[1]])
Sys.sleep(2)
# armazena descricoes
descriptions <- html %>%
rvest::html_nodes("[class='results__content']") %>%
rvest::html_nodes(".js-card-title .js-card-title") %>%
rvest::html_text2()
# armazena link do imovel
paths <- html %>%
rvest::html_nodes("[class='results__content']") %>%
rvest::html_nodes("[class='property-card__content-link js-card-title']") %>%
rvest::html_attr("href")
# armazena precos
prices <- html %>%
rvest::html_nodes("[class='results__content']") %>%
rvest::html_nodes("[class='property-card__price js-property-card-prices js-property-card__price-small']") %>%
rvest::html_text2() %>%
base::substring(4) %>%
stringr::str_remove_all(" /Mês")
# armazena resultados no dataframe
houses <- rbind(data.frame(descriptions, paths, prices), houses)
}
# zera td
base::rm(list = ls())
# carrega pckgs
pacman::p_load('RSelenium', 'plyr', 'dplyr', 'rvest', 'stringr', 'xlsx', 'mailR')
mailR::send.mail(
from = "felipeapellegrini@gmail.com",
to = "felipeapellegrini@gmail.com",
subject = 'Test email',
body = 'Veja o que eu encontrei',
html = T,
smtp = list(
host.name = "smtp.gmail.com",
port = 465,
user.name = "felipeapellegrini@gmail.com",
passwd = "e8947!@#987",
ssl = T
),
authenticate = T,
attach.files = 'C:/R-Projects/webscrapping-imoveis/houses.xlsx',
send = T
)
mailR::send.mail(
from = "noreply.houses@gmail.com",
to = "felipeapellegrini@gmail.com",
subject = 'Test email',
body = 'Veja o que eu encontrei',
html = T,
smtp = list(
host.name = "smtp.gmail.com",
port = 465,
user.name = "noreply.houses@gmail.com",
passwd = "123!@#asd",
ssl = T
),
authenticate = T,
attach.files = 'C:/R-Projects/webscrapping-imoveis/houses.xlsx',
send = T
)
mailR::send.mail(
from = "noreply.houses@gmail.com",
to = "felipeapellegrini@gmail.com",
subject = 'Test email',
body = 'Veja o que eu encontrei',
html = T,
smtp = list(
host.name = "smtp.gmail.com",
port = 465,
user.name = "noreply.houses@gmail.com",
passwd = "123!@#asd",
ssl = T
),
authenticate = T,
attach.files = 'C:/R-Projects/webscrapping-imoveis/houses.xlsx',
send = T
)
# configura pasta de trabalho
base::setwd('C:/R-Projects/webscrapping-imoveis')
# zera td
base::rm(list = ls())
# carrega pckgs
pacman::p_load('RSelenium', 'plyr', 'dplyr', 'rvest', 'stringr', 'xlsx', 'mailR')
# abstracao dos links por partes
base_link <- c('https://www.vivareal.com.br/')
route_params <- c('aluguel/sp/sao-jose-do-rio-preto/condominio_residencial/')
pagination <- c('?pagina=')
query_params <- c('#ordenar-por=preco:ASC&preco-ate=3000&preco-desde=2000&quartos=2&tipos=condominio_residencial,casa_residencial')
# Iniciar um servidor Selenium e criar instancia de browser
rD <- RSelenium::rsDriver(browser = 'chrome', port = 4545L, chromever = '89.0.4389.23')
remDr <- rD[['client']] # browser
#rD$client$open() # caso o navegador feche
# navegar p/ site
remDr$navigate(base::paste0(base_link,route_params,query_params))
base::Sys.sleep(5) # POG espera a pagina renderizar completamente
# armazena html do site
html <- rvest::read_html(remDr$getPageSource()[[1]])
# armazena numero de resultados p/ calcular qtd de paginas
outcome <- html %>%
rvest::html_nodes(".js-total-records") %>%
rvest::html_text2() %>%
base::as.numeric()
# armazena resultados por pagina
page_outcome <- html %>%
rvest::html_nodes("[class='property-card__content-link js-card-title']") %>%
rvest::html_text2() %>%
base::length() %>%
base::as.numeric()
# calcula qtd de paginas
pages <- 1:base::ceiling(outcome / page_outcome)
# declara objeto de resultados
houses <- base::data.frame()
for (p in pages) {
page_link <- base::paste0(base_link,route_params,pagination,p,query_params)
remDr$navigate(page_link)
base::Sys.sleep(5)
html <- rvest::read_html(remDr$getPageSource()[[1]])
# armazena descricoes
descriptions <- html %>%
rvest::html_nodes("[class='results__content']") %>%
rvest::html_nodes(".js-card-title .js-card-title") %>%
rvest::html_text2()
# armazena link do imovel
paths <- html %>%
rvest::html_nodes("[class='results__content']") %>%
rvest::html_nodes("[class='property-card__content-link js-card-title']") %>%
rvest::html_attr("href")
# armazena precos
prices <- html %>%
rvest::html_nodes("[class='results__content']") %>%
rvest::html_nodes("[class='property-card__price js-property-card-prices js-property-card__price-small']") %>%
rvest::html_text2() %>%
base::substring(4) %>%
stringr::str_remove_all(" /Mês")
# armazena resultados no dataframe
houses <- rbind(data.frame(descriptions, paste0(base_link,paths), prices), houses)
}
xlsx::write.xlsx(houses, 'houses.xlsx')
mailR::send.mail(
from = "noreply.houses@gmail.com",
to = "felipeapellegrini@gmail.com",
subject = 'Test email',
body = 'Veja o que eu encontrei',
html = T,
smtp = list(
host.name = "smtp.gmail.com",
port = 465,
user.name = "noreply.houses@gmail.com",
passwd = "123!@#asd",
ssl = T
),
authenticate = T,
attach.files = 'C:/R-Projects/webscrapping-imoveis/houses.xlsx',
send = T
)
